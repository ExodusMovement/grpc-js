From 384f596facc0a4bde62f0504d1777a77bb536162 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=A1=D0=BA=D0=BE=D0=B2=D0=BE=D1=80=D0=BE=D0=B4=D0=B0=20?=
 =?UTF-8?q?=D0=9D=D0=B8=D0=BA=D0=B8=D1=82=D0=B0=20=D0=90=D0=BD=D0=B4=D1=80?=
 =?UTF-8?q?=D0=B5=D0=B5=D0=B2=D0=B8=D1=87?= <chalkerx@gmail.com>
Date: Tue, 8 Sep 2020 00:04:35 +0300
Subject: [PATCH 1/2] Implement size limit check

---
 build/src/server-call.js | 30 ++++++++++++++++++++----------
 1 file changed, 20 insertions(+), 10 deletions(-)

diff --git a/build/src/server-call.js b/build/src/server-call.js
index 26a2b06..f0c8de5 100755
--- a/build/src/server-call.js
+++ b/build/src/server-call.js
@@ -269,21 +269,31 @@ class Http2ServerCallStream extends events_1.EventEmitter {
             const stream = this.stream;
             const chunks = [];
             let totalLength = 0;
+
+            let errored = false
+            const sizeLimitCheck = () => {
+                if (errored) return true
+                if (this.maxReceiveMessageSize !== -1 && totalLength > this.maxReceiveMessageSize) {
+                    this.sendError({
+                        code: constants_1.Status.RESOURCE_EXHAUSTED,
+                        details: `Received message larger than max (${totalLength} vs. ${this.maxReceiveMessageSize})`,
+                    });
+                    resolve();
+                    errored = true;
+                    return true
+                }
+                return false
+            }
+
             stream.on('data', (data) => {
-                chunks.push(data);
                 totalLength += data.byteLength;
+                if (sizeLimitCheck()) return
+                chunks.push(data);
             });
             stream.once('end', async () => {
+                if (sizeLimitCheck()) return
                 try {
                     const requestBytes = Buffer.concat(chunks, totalLength);
-                    if (this.maxReceiveMessageSize !== -1 &&
-                        requestBytes.length > this.maxReceiveMessageSize) {
-                        this.sendError({
-                            code: constants_1.Status.RESOURCE_EXHAUSTED,
-                            details: `Received message larger than max (${requestBytes.length} vs. ${this.maxReceiveMessageSize})`,
-                        });
-                        resolve();
-                    }
                     resolve(this.deserializeMessage(requestBytes));
                 }
                 catch (err) {
@@ -485,4 +495,4 @@ function handleExpiredDeadline(call) {
     call.cancelled = true;
     call.emit('cancelled', 'deadline');
 }
-//# sourceMappingURL=server-call.js.map
\ No newline at end of file
+//# sourceMappingURL=server-call.js.map
-- 
2.28.0

